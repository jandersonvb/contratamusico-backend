
services:
  backend:
    build:
      context: . # Diretório atual do projeto
      dockerfile: Dockerfile # Especifica o Dockerfile a ser usado para construir a imagem
    container_name: contratamusico-backend # Nome do container para fácil identificação
    ports:
      - "3000:3000" # Mapeia a porta 3000 do host para a porta 3000 do container
    env_file: # Carrega TODAS as variáveis de ambiente do arquivo .env
      - .env
    environment:
      # Variáveis de ambiente para configuração do backend
      - DATABASE_HOST=db # Nome do serviço do banco de dados 
    volumes:
      - .:/app # Monta o diretório atual do projeto no diretório /app do container
      - /app/node_modules # Impede que a pasta node_modules do host sobrescreva a do container
    command: npm run start:dev # Comando para iniciar a aplicação NestJS
    depends_on:
      db:
        condition: service_healthy # Garante que o serviço 'db' esteja saudável antes de iniciar o backend  

  # Serviço para o banco de dados PostgreSQL
  db:
    image: postgres:15-alpine # Imagem oficial do PostgreSQL. '15-alpine' para uma versão leve e específica.
    container_name: contratamusico-db
    ports:
      - "5432:5432" # Opcional: mapeia a porta do DB para o host (útil para ferramentas de DB externas)
    environment:
      # Variáveis de ambiente para configurar o PostgreSQL
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    env_file: .env # Carrega as variáveis de ambiente do arquivo .env
    volumes:
      - db_data:/var/lib/postgresql/data # Volume persistente para os dados do banco de dados
    healthcheck: # Healthcheck para garantir que o DB esteja pronto antes que o backend se conecte
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  db_data: # Define o volume nomeado para persistência dos dados do DB